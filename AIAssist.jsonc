{
  "framework": {
    "name": "GEMVC Framework",
    "version": "3.27.8",
    "description": "A lightweight PHP framework for building RESTful APIs with dual server support (Apache/OpenSwoole)",
    "phpVersion": ">=8.0",
    "requiredExtensions": ["pdo", "openssl", "gd"],
    "optionalExtensions": ["openswoole", "redis"],
    "architecture": "MVC-based RESTful API",
    "aiSupport": {
      "cursor": true,
      "copilot": true,
      "codeium": true
    }
  },

  "components": {
    "core": {
      "description": "Core framework components for request handling and routing",
      "classes": {
        "ApiService": {
          "description": "Base class for API services (Apache-compatible)",
          "methods": {
            "__construct": {
              "parameters": ["Request $request"],
              "returns": "void"
            },
            "index": {
              "returns": "JsonResponse"
            },
            "validatePosts": {
              "parameters": ["array $post_schema"],
              "returns": "void",
              "description": "Validates POST data and dies on failure (Apache only)"
            },
            "validateStringPosts": {
              "parameters": ["array $post_string_schema"],
              "returns": "void",
              "description": "Validates string lengths and dies on failure (Apache only)"
            },
            "mockResponse": {
              "parameters": ["string $method"],
              "returns": "array",
              "description": "Generates mock response data for documentation"
            }
          }
        },
        "SwooleApiService": {
          "description": "OpenSwoole-compatible API service base class",
          "methods": {
            "__construct": {
              "parameters": ["Request $request"],
              "returns": "void"
            },
            "index": {
              "returns": "JsonResponse"
            },
            "validatePosts": {
              "parameters": ["array $post_schema"],
              "returns": "JsonResponse|null",
              "description": "Validates POST data and returns error response on failure"
            },
            "validateStringPosts": {
              "parameters": ["array $post_string_schema"],
              "returns": "JsonResponse|null",
              "description": "Validates string lengths and returns error response on failure"
            },
            "safeValidatePosts": {
              "parameters": ["array $post_schema"],
              "returns": "JsonResponse|null",
              "description": "Safe validation wrapper for Swoole compatibility"
            },
            "safeValidateStringPosts": {
              "parameters": ["array $post_string_schema"],
              "returns": "JsonResponse|null",
              "description": "Safe string validation wrapper for Swoole compatibility"
            },
            "mockResponse": {
              "parameters": ["string $method"],
              "returns": "array",
              "description": "Generates mock response data for documentation"
            }
          }
        },
        "Bootstrap": {
          "description": "Handles request routing and service initialization",
          "methods": {
            "__construct": {
              "parameters": ["Request $request"],
              "returns": "void"
            }
          }
        },
        "SwooleBootstrap": {
          "description": "OpenSwoole-compatible request handling and routing",
          "methods": {
            "processRequest": {
              "returns": "ResponseInterface|null"
            }
          }
        },
        "ApiDocGenerator": {
          "description": "Generates API documentation from service classes",
          "methods": {
            "__construct": {
              "parameters": ["string $apiPath"],
              "returns": "void"
            },
            "generate": {
              "returns": "array"
            }
          }
        },
        "ProjectHelper": {
          "description": "Helper class for managing project paths and environment loading",
          "methods": {
            "rootDir": {
              "description": "Finds and returns the project root directory using composer.lock",
              "returns": "string",
              "throws": "Exception if composer.lock not found",
              "example": "ProjectHelper::rootDir()"
            },
            "appDir": {
              "description": "Returns the app directory path",
              "returns": "string",
              "throws": "Exception if app directory not found",
              "example": "ProjectHelper::appDir()"
            },
            "loadEnv": {
              "description": "Loads environment variables from .env file",
              "returns": "void",
              "throws": "Exception if .env file not found",
              "example": "ProjectHelper::loadEnv()"
            }
          }
        }
      }
    },
    "http": {
      "description": "HTTP request and response handling components",
      "classes": {
        "Request": {
          "description": "Handles HTTP request data with validation and authentication",
          "methods": {
            "auth": {
              "parameters": ["array $authRules = null"],
              "returns": "bool",
              "description": "Authenticates and optionally authorizes user"
            },
            "userRole": {
              "returns": "string|null",
              "description": "Returns user role from JWT token"
            },
            "userId": {
              "returns": "int|null",
              "description": "Returns user ID from JWT token"
            },
            "definePostSchema": {
              "parameters": ["array $schema"],
              "returns": "bool",
              "description": "Validates POST data against schema"
            },
            "defineGetSchema": {
              "parameters": ["array $schema"],
              "returns": "bool",
              "description": "Validates GET data against schema"
            },
            "definePutSchema": {
              "parameters": ["array $schema"],
              "returns": "bool",
              "description": "Validates PUT data against schema"
            },
            "definePatchSchema": {
              "parameters": ["array $schema"],
              "returns": "bool",
              "description": "Validates PATCH data against schema"
            },
            "validateStringPosts": {
              "parameters": ["array $stringPosts"],
              "returns": "bool",
              "description": "Validates string lengths in POST data"
            },
            "mapPostToObject": {
              "parameters": ["object $object", "array $manualMap = null"],
              "returns": "object|null",
              "description": "Maps POST data to object properties"
            },
            "mapPutToObject": {
              "parameters": ["object $object", "array $manualMap = null"],
              "returns": "object|null",
              "description": "Maps PUT data to object properties"
            },
            "findable": {
              "parameters": ["array $searchableGetValues"],
              "returns": "bool",
              "description": "Enables search functionality for GET parameters"
            },
            "sortable": {
              "parameters": ["array $sortableGetValues"],
              "returns": "bool",
              "description": "Enables sorting functionality for GET parameters"
            },
            "filterable": {
              "parameters": ["array $filterableGetValues"],
              "returns": "bool",
              "description": "Enables filtering functionality for GET parameters"
            },
            "setPageNumber": {
              "returns": "bool",
              "description": "Sets pagination page number from GET parameters"
            },
            "setPerPage": {
              "returns": "bool",
              "description": "Sets items per page from GET parameters"
            },
            "getPageNumber": {
              "returns": "int",
              "description": "Gets current page number"
            },
            "getPerPage": {
              "returns": "int",
              "description": "Gets current items per page"
            },
            "getFilterable": {
              "returns": "array",
              "description": "Gets current filter parameters"
            },
            "getFindable": {
              "returns": "array",
              "description": "Gets current search parameters"
            },
            "getSortable": {
              "returns": "string|null",
              "description": "Gets current sort column"
            },
            "getSortableAsc": {
              "returns": "string|null",
              "description": "Gets current ascending sort column"
            }
          }
        },
        "JsonResponse": {
          "description": "Provides standardized JSON response formatting",
          "methods": {
            "success": {
              "parameters": ["mixed $data", "int $count", "string $service_message"],
              "returns": "JsonResponse"
            },
            "created": {
              "parameters": ["mixed $data", "int $count", "string $service_message"],
              "returns": "JsonResponse"
            },
            "updated": {
              "parameters": ["mixed $data", "int $count", "string $service_message"],
              "returns": "JsonResponse"
            },
            "badRequest": {
              "parameters": ["string $service_message"],
              "returns": "JsonResponse"
            },
            "unprocessableEntity": {
              "parameters": ["string $service_message"],
              "returns": "JsonResponse"
            },
            "unauthorized": {
              "parameters": ["string $service_message"],
              "returns": "JsonResponse"
            },
            "forbidden": {
              "parameters": ["string $service_message"],
              "returns": "JsonResponse"
            },
            "notFound": {
              "parameters": ["string $service_message"],
              "returns": "JsonResponse"
            }
          }
        }
      }
    },
    "database": {
      "description": "Database interaction components",
      "classes": {
        "Table": {
          "description": "Base table class providing ORM capabilities with lazy loading",
          "methods": {
            "select": {
              "parameters": ["string|null $columns"],
              "returns": "self"
            },
            "where": {
              "parameters": ["string $column", "mixed $value"],
              "returns": "self"
            },
            "whereLike": {
              "parameters": ["string $column", "string $value"],
              "returns": "self"
            },
            "whereBetween": {
              "parameters": ["string $column", "mixed $lowerBand", "mixed $higherBand"],
              "returns": "self"
            },
            "whereNull": {
              "parameters": ["string $column"],
              "returns": "self"
            },
            "whereNotNull": {
              "parameters": ["string $column"],
              "returns": "self"
            },
            "join": {
              "parameters": ["string $table", "string $condition", "string $type = 'INNER'"],
              "returns": "self"
            },
            "orderBy": {
              "parameters": ["string $columnName = null", "bool $ascending = null"],
              "returns": "self"
            },
            "limit": {
              "parameters": ["int $limit"],
              "returns": "self"
            },
            "run": {
              "returns": "array|null"
            },
            "insertSingleQuery": {
              "returns": "static|null"
            },
            "updateSingleQuery": {
              "returns": "static|null"
            },
            "deleteByIdQuery": {
              "parameters": ["int $id"],
              "returns": "int|null"
            },
            "safeDeleteQuery": {
              "returns": "static|null"
            },
            "restoreQuery": {
              "returns": "static|null"
            }
          }
        }
      }
    }
  },

  "cli": {
    "description": "Command-line interface tools for code generation and database management",
    "commands": {
      "init": {
        "description": "Initializes a new GEMVC project with Swoole or Apache template",
        "example": "vendor/bin/gemvc init"
      },
      "create:service": {
        "description": "Creates a new API service with optional components",
        "options": {
          "-c": "Create controller",
          "-m": "Create model",
          "-t": "Create table"
        },
        "example": "vendor/bin/gemvc create:service User -cmt"
      },
      "create:controller": {
        "description": "Creates a new controller with optional components",
        "options": {
          "-m": "Create model",
          "-t": "Create table"
        },
        "example": "vendor/bin/gemvc create:controller User -mt"
      },
      "create:model": {
        "description": "Creates a new model with optional table",
        "options": {
          "-t": "Create table"
        },
        "example": "vendor/bin/gemvc create:model User -t"
      },
      "create:table": {
        "description": "Creates a new table class",
        "example": "vendor/bin/gemvc create:table User"
      },
      "create:crud": {
        "description": "Creates complete CRUD operations (service, controller, model, table)",
        "example": "vendor/bin/gemvc create:crud User"
      },
      "db:connect": {
        "description": "Tests database connection",
        "example": "vendor/bin/gemvc db:connect"
      },
      "db:describe": {
        "description": "Describes database structure and tables",
        "example": "vendor/bin/gemvc db:describe TableClassName"
      },
      "db:list": {
        "description": "Lists all database tables",
        "example": "vendor/bin/gemvc db:list"
      },
      "db:init": {
        "description": "Initializes database structure",
        "example": "vendor/bin/gemvc db:init"
      },
      "db:migrate": {
        "description": "Runs database migrations",
        "example": "vendor/bin/gemvc db:migrate TableClassName [--force]"
      },
      "db:drop": {
        "description": "Drops database tables",
        "example": "vendor/bin/gemvc db:drop TableName"
      },
      "db:unique": {
        "description": "Manages unique constraints",
        "example": "vendor/bin/gemvc db:unique table/column"
      }
    }
  },

  "documentation": {
    "description": "API documentation generation and tags",
    "tags": {
      "@http": "Specifies the HTTP method (GET, POST, etc.)",
      "@description": "Describes the endpoint's purpose",
      "@example": "Provides an example URL for the endpoint"
    },
    "access": "Available at yourdomain/index/document"
  },

  "security": {
    "features": [
      "JWT-based authentication",
      "Role-based authorization",
      "Input validation with schema definition",
      "String length validation",
      "Type-safe parameter binding",
      "Request filtering and sanitization"
    ]
  },

  "fileStructure": {
    "app": {
      "api": "API service classes",
      "controller": "Controller classes",
      "model": "Model classes",
      "table": "Table classes",
      ".env": "Environment configuration"
    },
    "src": {
      "core": "Core framework components",
      "http": "HTTP handling components",
      "database": "Database components",
      "CLI": "Command-line tools",
      "helper": "Helper classes like ProjectHelper"
    }
  },

  "bestPractices": {
    "services": [
      "Always extend ApiService (Apache) or SwooleApiService (Swoole)",
      "Use validatePosts() for input validation",
      "Use Request.auth() for authentication",
      "Use ProjectHelper for path management",
      "Return JsonResponse for consistent API responses"
    ],
    "controllers": [
      "Only called by Services",
      "Use mapPostToObject() for data binding",
      "Return JsonResponse"
    ],
    "models": [
      "Use underscore for non-DB properties",
      "Implement proper traits",
      "Type-safe properties"
    ],
    "authentication": [
      "Always use Request->auth() for authentication",
      "Check authentication before performing operations",
      "Use proper role checks with Request.auth(['admin', 'editor'])",
      "Use Request.userRole() to get current user role",
      "Use Request.userId() to get current user ID"
    ],
    "validation": [
      "Use definePostSchema() for POST validation",
      "Use defineGetSchema() for GET validation",
      "Use validateStringPosts() for string length validation",
      "Use mapPostToObject() for automatic object mapping"
    ],
    "database": [
      "Use Table class for database operations",
      "Leverage lazy loading for performance",
      "Use proper WHERE clauses for filtering",
      "Implement pagination with limit() and setPageNumber()"
    ]
  }
}
