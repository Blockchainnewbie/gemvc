{
  "framework": {
    "name": "GEMVC Framework",
    "version": "3.27.8",
    "description": "A lightweight PHP framework for building RESTful APIs with dual server support (Apache/OpenSwoole)",
    "phpVersion": ">=8.0",
    "requiredExtensions": ["pdo", "openssl", "gd"],
    "optionalExtensions": ["openswoole"],
    "architecture": "MVC-based RESTful API",
    "aiSupport": {
      "cursor": true,
      "copilot": true,
      "codeium": true
    }
  },

  "components": {
    "core": {
      "description": "Core framework components for request handling and routing",
      "classes": {
        "ApiService": {
          "description": "Base class for API services",
          "methods": {
            "__construct": {
              "parameters": ["Request $request"],
              "returns": "void"
            },
            "index": {
              "returns": "JsonResponse"
            },
            "validatePosts": {
              "parameters": ["array $post_schema"],
              "returns": "void"
            },
            "validateStringPosts": {
              "parameters": ["array $post_string_schema"],
              "returns": "void"
            }
          }
        },
        "SwooleApiService": {
          "description": "OpenSwoole-compatible API service base class",
          "methods": {
            "__construct": {
              "parameters": ["Request $request"],
              "returns": "void"
            },
            "index": {
              "returns": "JsonResponse"
            },
            "validatePosts": {
              "parameters": ["array $post_schema"],
              "returns": "JsonResponse|null"
            },
            "validateStringPosts": {
              "parameters": ["array $post_string_schema"],
              "returns": "JsonResponse|null"
            }
          }
        },
        "Bootstrap": {
          "description": "Handles request routing and service initialization",
          "methods": {
            "__construct": {
              "parameters": ["Request $request"],
              "returns": "void"
            }
          }
        },
        "SwooleBootstrap": {
          "description": "OpenSwoole-compatible request handling and routing",
          "methods": {
            "processRequest": {
              "returns": "ResponseInterface|null"
            }
          }
        },
        "ApiDocGenerator": {
          "description": "Generates API documentation from service classes",
          "methods": {
            "__construct": {
              "parameters": ["string $apiPath"],
              "returns": "void"
            },
            "generate": {
              "returns": "array"
            }
          }
        },
        "ProjectHelper": {
          "description": "Helper class for managing project paths and environment loading",
          "methods": {
            "rootDir": {
              "description": "Finds and returns the project root directory using composer.lock",
              "returns": "string",
              "throws": "Exception if composer.lock not found",
              "example": "ProjectHelper::rootDir()"
            },
            "appDir": {
              "description": "Returns the app directory path",
              "returns": "string",
              "throws": "Exception if app directory not found",
              "example": "ProjectHelper::appDir()"
            },
            "loadEnv": {
              "description": "Loads environment variables from .env file",
              "returns": "void",
              "throws": "Exception if .env file not found",
              "example": "ProjectHelper::loadEnv()"
            }
          }
        }
      }
    },
    "http": {
      "description": "HTTP request and response handling components",
      "classes": {
        "Request": {
          "description": "Handles HTTP request data with validation and authentication",
          "methods": {
            "auth": {
              "parameters": ["array $authRules = null"],
              "returns": "bool"
            },
            "definePostSchema": {
              "parameters": ["array $schema"],
              "returns": "bool"
            },
            "validateStringPosts": {
              "parameters": ["array $stringPosts"],
              "returns": "bool"
            },
            "mapPostToObject": {
              "parameters": ["object $object", "array $manualMap = null"],
              "returns": "object|null"
            },
            "findable": {
              "parameters": ["array $searchableGetValues"],
              "returns": "bool"
            },
            "sortable": {
              "parameters": ["array $sortableGetValues"],
              "returns": "bool"
            },
            "filterable": {
              "parameters": ["array $filterableGetValues"],
              "returns": "bool"
            }
          }
        },
        "JsonResponse": {
          "description": "Provides standardized JSON response formatting",
          "methods": {
            "success": {
              "parameters": ["mixed $data", "int $count", "string $service_message"],
              "returns": "JsonResponse"
            },
            "created": {
              "parameters": ["mixed $data", "int $count", "string $service_message"],
              "returns": "JsonResponse"
            },
            "updated": {
              "parameters": ["mixed $data", "int $count", "string $service_message"],
              "returns": "JsonResponse"
            },
            "badRequest": {
              "parameters": ["string $service_message"],
              "returns": "JsonResponse"
            },
            "unprocessableEntity": {
              "parameters": ["string $service_message"],
              "returns": "JsonResponse"
            }
          }
        }
      }
    },
    "database": {
      "description": "Database interaction components",
      "classes": {
        "Table": {
          "description": "Base table class providing ORM capabilities",
          "methods": {
            "select": {
              "parameters": ["string|null $columns"],
              "returns": "self"
            },
            "where": {
              "parameters": ["string $column", "mixed $value"],
              "returns": "self"
            },
            "run": {
              "returns": "array|null"
            }
          }
        }
      }
    }
  },

  "cli": {
    "description": "Command-line interface tools for code generation",
    "commands": {
      "create:service": {
        "description": "Creates a new API service with optional components",
        "options": {
          "-c": "Create controller",
          "-m": "Create model",
          "-t": "Create table"
        },
        "example": "vendor/bin/gemvc create:service User -cmt"
      },
      "create:controller": {
        "description": "Creates a new controller with optional components",
        "options": {
          "-m": "Create model",
          "-t": "Create table"
        },
        "example": "vendor/bin/gemvc create:controller User -mt"
      },
      "create:model": {
        "description": "Creates a new model with optional table",
        "options": {
          "-t": "Create table"
        },
        "example": "vendor/bin/gemvc create:model User -t"
      },
      "create:table": {
        "description": "Creates a new table class",
        "example": "vendor/bin/gemvc create:table User"
      }
    }
  },

  "documentation": {
    "description": "API documentation generation and tags",
    "tags": {
      "@http": "Specifies the HTTP method (GET, POST, etc.)",
      "@description": "Describes the endpoint's purpose",
      "@example": "Provides an example URL for the endpoint"
    },
    "access": "Available at yourdomain/index/document"
  },

  "security": {
    "features": [
      "JWT-based authentication",
      "Role-based authorization",
      "Input validation",
      "String length validation",
      "Type-safe parameter binding"
    ]
  },

  "fileStructure": {
    "app": {
      "api": "API service classes",
      "controller": "Controller classes",
      "model": "Model classes",
      "table": "Table classes",
      ".env": "Environment configuration"
    },
    "src": {
      "core": "Core framework components",
      "http": "HTTP handling components",
      "database": "Database components",
      "CLI": "Command-line tools",
      "helper": "Helper classes like ProjectHelper"
    }
  },

  "bestPractices": {
    "services": [
      "Always extend ApiService",
      "Validate inputs first",
      "Use Request.auth() for authentication",
      "Use ProjectHelper for path management"
    ],
    "controllers": [
      "Only called by Services",
      "Use mapPost for data binding",
      "Return JsonResponse"
    ],
    "models": [
      "Use underscore for non-DB props",
      "Implement proper traits",
      "Type-safe properties"
    ],
    "authentication": [
      "Always use Request->auth() for authentication",
      "Check authentication before performing operations",
      "Use proper role checks with Request.auth(['admin', 'editor'])"
    ]
  }
}
