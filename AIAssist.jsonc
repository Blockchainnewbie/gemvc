{
  "framework": {
    "name": "GEMVC Framework",
    "version": "5.9.14",
    "extends": "GEMVC Library v3.27.8",
    "architecture": "layered-microservice",
    "phpVersion": ">=8.0",
    "aiSupport": {
      "cursor": true,
      "copilot": true,
      "codeium": true
    },
    "libraryIntegration": {
      "path": "vendor/gemvc/library",
      "documentation": {
        "main": "Documentation.md",
        "aiAssist": "AIAssist.jsonc",
        "apiReference": "GEMVCLibraryAPIReference.json"
      },
      "components": {
        "http": "HTTP handling",
        "helper": "Utility functions",
        "database": "Database operations",
        "email": "Email functionality"
      }
    },
    "platformSupport": {
      "apache": {
        "enabled": true,
        "components": ["Bootstrap", "ApacheRequest"],
        "configuration": "app/.env",
        "startup": "index.php"
      },
      "swoole": {
        "enabled": true,
        "components": ["SwooleBootstrap", "SwooleRequest", "SwooleApiService"],
        "configuration": "app/.env (SWOOLE_MODE=true)",
        "startup": "index.php",
        "docker": {
          "compose": "docker-compose.yml",
          "dockerfile": "Dockerfile"
        }
      }
    },
    "cli": {
      "enabled": true,
      "commands": {
        "init": {
          "description": "Initialize project structure",
          "usage": "vendor/bin/gemvc init",
          "features": [
            "Create directory structure",
            "Set up configuration files",
            "Configure global CLI command wrapper"
          ]
        },
        "setup": {
          "description": "Configure platform-specific environment",
          "usage": "vendor/bin/gemvc setup [apache|swoole]",
          "features": [
            "Copy platform-specific files",
            "Configure environment settings",
            "Set up Docker files for Swoole"
          ]
        },
        "create:service": {
          "description": "Creates a complete service with CRUD operations",
          "usage": "vendor/bin/gemvc create:service ServiceName",
          "generates": {
            "service": {
              "path": "app/api/{ServiceName}.php",
              "extends": "ApiService",
              "methods": {
                "create": {
                  "http": "POST",
                  "validation": ["name: string", "description: string"]
                },
                "read": {
                  "http": "GET",
                  "params": ["id: int"]
                },
                "update": {
                  "http": "POST",
                  "validation": ["id: int", "name: string", "description: string"]
                },
                "delete": {
                  "http": "POST",
                  "validation": ["id: int"]
                },
                "list": {
                  "http": "GET",
                  "features": ["filtering", "sorting", "pagination"]
                }
              }
            },
            "controller": {
              "path": "app/controller/{ServiceName}Controller.php",
              "extends": "Controller",
              "features": ["type-safe mapping", "CRUD operations"]
            },
            "model": {
              "path": "app/model/{ServiceName}Model.php",
              "extends": "{ServiceName}Table",
              "features": ["data logic", "response formatting"]
            },
            "table": {
              "path": "app/table/{ServiceName}Table.php",
              "extends": "CRUDTable",
              "properties": {
                "id": "int",
                "name": "string",
                "description": "string"
              }
            }
          }
        }
      }
    },
    "requirements": {
      "php": ">=8.0",
      "library": ">=3.27.8",
      "phpstan": "level 9",
      "openswoole": "optional for Swoole platform"
    }
  },

  "layers": {
    "service": "Authentication and validation layer",
    "controller": "Business logic layer",
    "model": "Data logic and response layer",
    "table": "Database interaction layer"
  },

  "patterns": {
    "request": {
      "flow": "Frontend → Service → Controller → Model → Table",
      "validation": {
        "service": "Input validation",
        "controller": "Business rules",
        "model": "Data integrity"
      }
    },
    "response": {
      "flow": "Table → Model → Controller → Service → Frontend",
      "types": {
        "JsonResponse": "Direct API response",
        "object": "Further processing",
        "primitive": "Simple returns"
      }
    },
    "authentication": {
      "flow": "Request.auth() → JWT Validation → userRole()/userId() → Role-based Access",
      "components": {
        "Request": "Handles authentication and authorization directly",
        "auth()": "Authenticates request and optionally checks roles",
        "userRole()": "Returns authenticated user's role with enhanced error handling",
        "userId()": "Returns authenticated user's ID with enhanced error handling"
      }
    }
  },

  "bestPractices": {
    "services": [
      "Always extend ApiService (or SwooleApiService for Swoole)",
      "Validate inputs first",
      "Use Request.auth() for authentication"
    ],
    "controllers": [
      "Only called by Services",
      "Use mapPost for data binding",
      "Return JsonResponse"
    ],
    "models": [
      "Use underscore for non-DB props",
      "Implement proper traits",
      "Type-safe properties"
    ],
    "authentication": [
      "Always use Request.auth() for authentication",
      "Check authentication before performing operations",
      "Use proper role checks with Request.auth(['admin', 'editor'])",
      "Handle Request.userId() and Request.userRole() return values properly"
    ]
  },

  "bootstrap": {
    "initialization": {
      "apache": {
        "location": "index.php",
        "required": {
          "autoload": "vendor/autoload.php",
          "environment": "app/.env",
          "components": [
            "Gemvc\\Core\\Bootstrap",
            "Gemvc\\Http\\ApacheRequest",
            "Gemvc\\Http\\NoCors"
          ]
        }
      },
      "swoole": {
        "location": "index.php",
        "required": {
          "autoload": "vendor/autoload.php",
          "environment": "app/.env",
          "components": [
            "App\\Core\\SwooleBootstrap",
            "Gemvc\\Http\\SwooleRequest",
            "Gemvc\\Http\\NoCors",
            "OpenSwoole\\HTTP\\Server"
          ]
        },
        "features": [
          "Hot reload in development mode",
          "Connection pooling",
          "File preloading in production mode",
          "App directory access protection"
        ]
      },
      "dependencies": {
        "symfony/dotenv": "Environment variable loading",
        "openswoole/openswoole": "OpenSwoole server (optional)"
      }
    },
    "sequence": [
      "CORS configuration",
      "Environment loading",
      "Request initialization",
      "Framework bootstrap"
    ]
  },

  "ApiService": {
    "methods": {
      "auth": {
        "parameters": [{"name": "roles", "type": "array<string>|null"}],
        "returns": "bool",
        "description": "Authenticate request and optionally check roles",
        "examples": [
          "if (!$this->request->auth()) { return $this->request->returnResponse(); }",
          "if (!$this->request->auth(['admin', 'editor'])) { return $this->request->returnResponse(); }"
        ]
      },
      "validatePosts": {
        "parameters": [{"name": "schema", "type": "array<string, string>"}],
        "returns": "bool",
        "description": "Validate POST data against schema",
        "examples": ["$this->validatePosts(['email' => 'email', 'password' => 'string']);"]
      }
    }
  },

  "exceptions": {
    "ValidationException": {
      "when": "Input validation fails",
      "properties": ["errors", "message"],
      "handling": "example code"
    }
  },

  "traits": {
    "CreateTrait": {
      "methods": ["create", "createWithValidation"],
      "properties": ["required", "optional"],
      "usage": "example code",
      "combinations": ["with other traits"]
    }
  },

  "examples": {
    "requests": {
      "create": {
        "endpoint": "/api/users/create",
        "method": "POST",
        "body": {"name": "string", "email": "string"},
        "headers": {"Authorization": "Bearer ..."}
      }
    },
    "responses": {
      "success": {"code": 200, "body": {"...": "..."}},
      "validation": {"code": 422, "body": {"...": "..."}},
      "error": {"code": 500, "body": {"...": "..."}}
    },
    "authentication": {
      "basic": {
        "service": "if (!$this->request->auth()) { return $this->request->returnResponse(); }",
        "roleCheck": "if (!$this->request->auth(['admin'])) { return $this->request->returnResponse(); }",
        "userId": "$userId = $this->request->userId(); // Returns null with 401 response if not authenticated",
        "userRole": "$userRole = $this->request->userRole(); // Returns null with 401 response if not authenticated"
      }
    },
    "fullCycle": {
      "request": {
        "url": "/api/users/create",
        "method": "POST",
        "headers": {},
        "body": {}
      },
      "processing": {
        "service": "code example",
        "controller": "code example",
        "model": "code example"
      },
      "response": {
        "success": {},
        "error": {}
      }
    }
  },

  "lifecycle": {
    "request": {
      "stages": [
        {
          "name": "Bootstrap",
          "class": "Bootstrap or SwooleBootstrap",
          "methods": ["initialize", "route", "processRequest"],
          "example": "code example"
        },
        {
          "name": "Service",
          "validations": ["input", "auth"],
          "example": "code example"
        }
        // ... other stages
      ]
    }
  },
  
  "swoole": {
    "components": {
      "SwooleBootstrap": {
        "purpose": "Routes and processes requests in OpenSwoole environment",
        "methods": {
          "processRequest": "Processes HTTP request and returns JsonResponse"
        }
      },
      "SwooleApiService": {
        "purpose": "Base class for API services in OpenSwoole environment",
        "methods": {
          "validatePosts": "Safe validation method that returns error response",
          "validateStringPosts": "Safe string validation that returns error response"
        }
      },
      "SwooleRequest": {
        "purpose": "Adapts Swoole request to GEMVC Request"
      },
      "SwooleWebSocketHandler": {
        "purpose": "Manages WebSocket connections with advanced features",
        "features": [
          "Connection management with timeout detection",
          "Rate limiting with sliding window",
          "Heartbeat mechanism with ping/pong",
          "Channel-based messaging (pub/sub)",
          "Redis integration for horizontal scaling"
        ]
      }
    },
    "server": {
      "configuration": {
        "worker_num": "Number of worker processes",
        "max_request": "Maximum requests per worker",
        "enable_coroutine": "Enables coroutines for concurrency",
        "document_root": "Root directory for static files",
        "enable_static_handler": "Enables static file serving",
        "static_handler_locations": "Directories for static files"
      },
      "features": {
        "hotReload": "Automatic code reloading in development",
        "preloading": "File preloading for performance in production",
        "securityProtection": "Prevents direct access to app directory"
      },
      "docker": {
        "compose": "Multi-container setup with MySQL",
        "healthChecks": "Database connectivity verification",
        "networking": "Custom bridge network"
      }
    }
  }
}
