#!/usr/bin/env php
<?php

// If this is being run from the bin directory in the package itself
if (basename(dirname(__DIR__)) === 'src' && basename(dirname(dirname(__DIR__))) === 'gemvc') {
    // Load the project-local autoloader if available, or try the vendor one
    if (file_exists(__DIR__ . '/../../vendor/autoload.php')) {
        require __DIR__ . '/../../vendor/autoload.php';
    } elseif (file_exists(__DIR__ . '/../../../autoload.php')) {
        require __DIR__ . '/../../../autoload.php';
    }
} else {
    // Find project root by looking for vendor/gemvc/framework
    $dir = str_replace('\\', '/', getcwd());
    while ($dir !== '/' && $dir !== '' && !file_exists($dir.'/vendor/gemvc/framework')) {
        $dir = dirname($dir);
    }

    if ($dir === '/' || $dir === '') {
        // If we're in init mode and can't find a project, that's expected
        if (isset($argv[1]) && $argv[1] === 'init') {
            $dir = getcwd();
        } else {
            echo "\033[31mError: Could not find project root\033[0m\n";
            exit(1);
        }
    }

    // Set project root
    define('PROJECT_ROOT', $dir);

    // Load autoloader
    if (file_exists(PROJECT_ROOT . '/vendor/autoload.php')) {
        require PROJECT_ROOT . '/vendor/autoload.php';
    } else {
        echo "\033[31mError: Autoloader not found\033[0m\n";
        exit(1);
    }
}

// Only verify basic structure for commands other than init
$command = $argv[1] ?? '--help';
if ($command !== 'init' && defined('PROJECT_ROOT')) {
    // Verify basic structure
    $requiredDirs = [
        PROJECT_ROOT . '/app',
        PROJECT_ROOT . '/app/api',
        PROJECT_ROOT . '/app/controller',
        PROJECT_ROOT . '/app/model',
        PROJECT_ROOT . '/app/table'
    ];

    foreach ($requiredDirs as $dir) {
        if (!is_dir($dir) && !@mkdir($dir, 0755, true)) {
            echo "\033[31mError: Cannot create directory: $dir\033[0m\n";
            exit(1);
        }
    }
}

// Process command
$args = array_slice($argv, 2);

try {
    switch ($command) {
        case 'init':
            $handler = new \Gemvc\CLI\Commands\InitProject($args);
            $handler->execute();
            break;

        case 'setup':
            if (empty($args[0])) {
                echo "\033[31mError: Platform type required\033[0m\n";
                echo "Usage: gemvc setup [apache|swoole]\n";
                exit(1);
            }
            $handler = new \Gemvc\CLI\Commands\Setup($args);
            $handler->execute();
            break;

        case 'create:service':
            if (empty($args[0])) {
                echo "\033[31mError: Service name required\033[0m\n";
                echo "Usage: gemvc create:service ServiceName\n";
                exit(1);
            }
            $handler = new \Gemvc\CLI\Commands\CreateService($args);
            $handler->execute();
            break;

        case '--help':
        default:
            echo "GEMVC Framework CLI v1.0.0\n\n";
            echo "Available commands:\n";
            echo "  init                          Initialize GEMVC project structure\n";
            echo "  setup [apache|swoole]         Configure project for Apache or OpenSwoole\n";
            echo "  create:service <ServiceName>  Create a new service\n";
            echo "  --help                        Show this help message\n";
            exit(0);
    }
} catch (\Exception $e) {
    echo "\033[31mError: {$e->getMessage()}\033[0m\n";
    exit(1);
} 