{
  "libraryName": "GEMVC Library",
  "version": "3.27.8",
  "description": "A lightweight PHP framework for building RESTful APIs with dual server support (Apache/OpenSwoole).",
  "author": "Ali Khorsandfard <ali.khorsandfard@gmail.com>",
  "repository": "https://github.com/secure73/gemvc",
  "phpVersion": ">=8.0",
  "requiredExtensions": ["pdo", "openssl", "gd"],
  "optionalExtensions": ["openswoole"],
  "architecture": "MVC-based RESTful API",
  "components": {
    "core": {
      "description": "Core framework components for request handling and routing.",
      "classes": {
        "ApiService": {
          "description": "Base class for API services, handling request validation and response formatting.",
          "methods": {
            "__construct": {
              "description": "Initialize a new API service",
              "parameters": ["Request $request"],
              "returns": "void"
            },
            "index": {
              "description": "Default welcome endpoint",
              "returns": "JsonResponse"
            },
            "validatePosts": {
              "description": "Validates POST data against a schema",
              "parameters": ["array $post_schema"],
              "returns": "void"
            },
            "validateStringPosts": {
              "description": "Validates string lengths in POST data",
              "parameters": ["array $post_string_schema"],
              "returns": "void"
            }
          }
        },
        "SwooleApiService": {
          "description": "OpenSwoole-compatible API service base class.",
          "methods": {
            "__construct": {
              "description": "Initialize a new Swoole API service",
              "parameters": ["Request $request"],
              "returns": "void"
            },
            "index": {
              "description": "Default welcome endpoint",
              "returns": "JsonResponse"
            },
            "validatePosts": {
              "description": "Validates POST data against a schema",
              "parameters": ["array $post_schema"],
              "returns": "JsonResponse|null"
            },
            "validateStringPosts": {
              "description": "Validates string lengths in POST data",
              "parameters": ["array $post_string_schema"],
              "returns": "JsonResponse|null"
            }
          }
        },
        "Bootstrap": {
          "description": "Handles request routing and service initialization.",
          "methods": {
            "__construct": {
              "description": "Initialize the bootstrap process",
              "parameters": ["Request $request"],
              "returns": "void"
            }
          }
        },
        "SwooleBootstrap": {
          "description": "OpenSwoole-compatible request handling and routing.",
          "methods": {
            "processRequest": {
              "description": "Process the request and return a response",
              "returns": "ResponseInterface|null"
            }
          }
        },
        "ApiDocGenerator": {
          "description": "Generates API documentation from service classes.",
          "methods": {
            "__construct": {
              "description": "Initialize the documentation generator",
              "parameters": ["string $apiPath"],
              "returns": "void"
            },
            "generate": {
              "description": "Generate API documentation",
              "returns": "array"
            }
          }
        }
      }
    },
    "http": {
      "description": "HTTP request and response handling components.",
      "classes": {
        "Request": {
          "description": "Handles HTTP request data with validation and authentication.",
          "methods": {
            "auth": {
              "description": "Authenticates and optionally authorizes the request",
              "parameters": ["array $authRules = null"],
              "returns": "bool"
            },
            "definePostSchema": {
              "description": "Validates POST data against a schema",
              "parameters": ["array $schema"],
              "returns": "bool"
            },
            "validateStringPosts": {
              "description": "Validates string lengths in POST data",
              "parameters": ["array $stringPosts"],
              "returns": "bool"
            },
            "mapPostToObject": {
              "description": "Maps POST data to an object's properties",
              "parameters": ["object $object", "array $manualMap = null"],
              "returns": "object|null"
            },
            "findable": {
              "description": "Handles findable query parameters",
              "parameters": ["array $searchableGetValues"],
              "returns": "bool"
            },
            "sortable": {
              "description": "Handles sortable query parameters",
              "parameters": ["array $sortableGetValues"],
              "returns": "bool"
            },
            "filterable": {
              "description": "Handles filterable query parameters",
              "parameters": ["array $filterableGetValues"],
              "returns": "bool"
            }
          }
        },
        "JsonResponse": {
          "description": "Provides standardized JSON response formatting.",
          "methods": {
            "success": {
              "description": "Returns a success response",
              "parameters": ["mixed $data", "int $count", "string $service_message"],
              "returns": "JsonResponse"
            },
            "created": {
              "description": "Returns a created response",
              "parameters": ["mixed $data", "int $count", "string $service_message"],
              "returns": "JsonResponse"
            },
            "updated": {
              "description": "Returns an updated response",
              "parameters": ["mixed $data", "int $count", "string $service_message"],
              "returns": "JsonResponse"
            },
            "badRequest": {
              "description": "Returns a bad request response",
              "parameters": ["string $service_message"],
              "returns": "JsonResponse"
            },
            "unprocessableEntity": {
              "description": "Returns an unprocessable entity response",
              "parameters": ["string $service_message"],
              "returns": "JsonResponse"
            }
          }
        }
      }
    },
    "database": {
      "description": "Database interaction components.",
      "classes": {
        "Table": {
          "description": "Base table class providing ORM capabilities.",
          "methods": {
            "select": {
              "description": "Starts building a SELECT query",
              "parameters": ["string|null $columns"],
              "returns": "self"
            },
            "where": {
              "description": "Adds a WHERE condition",
              "parameters": ["string $column", "mixed $value"],
              "returns": "self"
            },
            "run": {
              "description": "Executes the query and returns results",
              "returns": "array|null"
            }
          }
        }
      }
    }
  },
  "cli": {
    "description": "Command-line interface tools for code generation.",
    "commands": {
      "create:service": {
        "description": "Creates a new API service with optional components",
        "options": {
          "-c": "Create controller",
          "-m": "Create model",
          "-t": "Create table"
        },
        "example": "vendor/bin/gemvc create:service User -cmt"
      },
      "create:controller": {
        "description": "Creates a new controller with optional components",
        "options": {
          "-m": "Create model",
          "-t": "Create table"
        },
        "example": "vendor/bin/gemvc create:controller User -mt"
      },
      "create:model": {
        "description": "Creates a new model with optional table",
        "options": {
          "-t": "Create table"
        },
        "example": "vendor/bin/gemvc create:model User -t"
      },
      "create:table": {
        "description": "Creates a new table class",
        "example": "vendor/bin/gemvc create:table User"
      }
    }
  },
  "documentation": {
    "description": "API documentation generation and tags.",
    "tags": {
      "@http": "Specifies the HTTP method (GET, POST, etc.)",
      "@description": "Describes the endpoint's purpose",
      "@example": "Provides an example URL for the endpoint"
    },
    "access": "Available at yourdomain/index/document"
  },
  "security": {
    "features": [
      "JWT-based authentication",
      "Role-based authorization",
      "Input validation",
      "String length validation",
      "Type-safe parameter binding"
    ]
  },
  "fileStructure": {
    "app": {
      "api": "API service classes",
      "controller": "Controller classes",
      "model": "Model classes",
      "table": "Table classes"
    },
    "src": {
      "core": "Core framework components",
      "http": "HTTP handling components",
      "database": "Database components",
      "CLI": "Command-line tools"
    }
  }
}